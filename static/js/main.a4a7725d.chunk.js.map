{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","Helpers/getUser.ts","api/users.ts","App.tsx","api/todos.ts","Helpers/getNewTodoId.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","getUserById","userId","users","find","username","todosWithUsers","usersFromServer","App","useState","setTodos","setTitle","setUserId","isTitleValid","setIsTitleValid","isUserSelected","setIsUserSelected","action","method","onSubmit","event","preventDefault","currentTodos","newTodo","Math","max","current","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4a7725d.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../Types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': !!completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};","import React from 'react';\nimport { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);","import { User } from '../Types/User';\n\nexport function getUserById(userId: number, users: User[]): User | null {\n  const foundUser = users.find(user => user.id === userId);\n\n  return foundUser || null;\n}","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo } from './Types/Todo';\nimport './App.scss';\n\nimport { getUserById } from './Helpers/getUser';\nimport { getNewTodoId } from './Helpers/getNewTodoId';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './Types/User';\n\nconst todosWithUsers: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId, usersFromServer),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosWithUsers);\n  const [title, setTitle] = useState<string>('');\n  const [userId, setUserId] = useState<number | string>('');\n  const [isTitleValid, setIsTitleValid] = useState<boolean>(true);\n  const [isUserSelected, setIsUserSelected] = useState<boolean>(true);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title || !userId) {\n      if (!title) {\n        setIsTitleValid(false);\n      }\n\n      if (!userId) {\n        setIsUserSelected(false);\n      }\n\n      return;\n    }\n\n    const newTodo = {\n      id: getNewTodoId(todos),\n      userId: +userId,\n      title,\n      completed: false,\n      user: getUserById(+userId, usersFromServer),\n    };\n\n    setTodos((current => [...current, newTodo]));\n\n    setTitle('');\n    setUserId('');\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(event.target.value);\n    setIsUserSelected(true);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitleValid(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            value={title}\n            name=\"todoTitle\"\n            onChange={handleTitleChange}\n          />\n          {!isTitleValid && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            name=\"userSelect\"\n            onChange={handleUserChange}\n            data-cy=\"userSelect\"\n            value={userId}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map((user: User) => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {!isUserSelected\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { Todo } from '../Types/Todo';\n\nexport function getNewTodoId(currentTodos: Todo[]) {\n  return Math.max(...currentTodos.map((todo) => todo.id)) + 1;\n}","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}